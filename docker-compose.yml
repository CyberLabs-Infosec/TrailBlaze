services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=secret
      - PGUSER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    restart: always

  backend:
    image: node:latest
    user: node
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./api:/home/node/app
    ports:
      - 15001:15001
    command: "npm start"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  frontend:
    image: node:latest
    user: node
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./client:/home/node/app
    ports:
      - 15002:15002
    command: "npm run start"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # admin:
  #   image: node:latest
  #   user: node
  #   working_dir: /home/node/app
  #   environment:
  #     - NODE_ENV=production
  #   volumes:
  #     - ./admin:/home/node/app
  #   ports:
  #     - 15003:15003
  #   command: "npm run start"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  docker_bot:
    build: ./bot
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  backup:
    build: ./db_backup
    command: "crond -f -d 8"
    depends_on:
      postgres:
        condition: service_healthy

  fuel_cronjob:
    build: ./fuel
    command: "crond -f -d 8"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
      
  file_server:
    build: ./challenges/
    volumes:
      - ./challenges:/project
    ports:
      - 15004:8003
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  reset_flag:
    image: node:latest
    user: node
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./reset_flag:/home/node/app
    command: "node main.js"
    depends_on:
      postgres:
        condition: service_healthy

  level_5:
    image: httpd
    ports:
      - 16003:80
    volumes:
      - ./challenges/level_5/build:/usr/local/apache2/htdocs/
    restart: always

  level_7:
    build: ./challenges/
    ports:
      - 16001:8003
    volumes:
      - ./challenges/level_7/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  level_8:
    image: httpd
    ports:
      - 16002:80
    volumes:
      - ./challenges/level_8/build:/usr/local/apache2/htdocs/
    restart: always

  level_10:
    build: ./challenges/
    ports:
      - 16004:8003
    volumes:
      - ./challenges/level_10/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  level_11:
    build: ./challenges/
    ports:
      - 16000:8003
    volumes:
      - ./challenges/level_11/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  level_12:
    image: httpd
    ports:
      - 16005:80
    volumes:
      - ./challenges/level_12/build:/usr/local/apache2/htdocs/
    restart: always
  
  level_16:
    build: ./challenges/
    ports:
      - 16006:8003
    volumes:
      - ./challenges/level_16/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  level_18:
    build: ./challenges/
    ports:
      - 16007:8003
    volumes:
      - ./challenges/level_18/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  level_19:
    build: ./challenges/
    ports:
      - 16008:8003
    volumes:
      - ./challenges/level_19/build:/project
    depends_on:
      postgres:
        condition: service_healthy
    restart: always